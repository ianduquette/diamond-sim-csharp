# Single-Game Simulator & Text Report (.prp) — v1 Simple

> Spec only — no code here
> Keep scope small and deterministic where required

Status: Draft
Created: 2025-10-26
Epic: Baseball Simulation Engine – Game Loop & Output
Depends on: RBI Attribution PRD (Rev 1), LOB Instant-of-Third-Out .prp

---

## Goal
Run one 9-inning baseball game from a seed and two teams, and produce a clear **text** report only:
- inning line score
- per-plate-appearance play log (no pitch-by-pitch)
- final team totals and **box scores** (batting + pitching)

No JSON, no extras UI, no advanced options.

---

## Out of Scope (v1)
- No bullpen changes, fatigue, or injuries
- No extra innings (ties allowed)
- No park effects, weather, or lineup AI decisions beyond random lineup generation
- No pitch-by-pitch logging
- No JSON or additional output formats

---

## Inputs (user-facing)
- **Seed (optional)**: integer. If omitted, game uses a random seed and **prints the chosen seed** in the header for reproducibility.
- **Teams**:
  - Home (name), Away (name)
  - **Lineup source**:
    - If a batting lineup is **provided**, use it as-is (must be 9 hitters; DH required; pitcher never hits).
    - If a lineup is **not provided**, **generate a random lineup** (see “Random Lineup” below).
- **Designated Hitter**: **Always ON** in v1. Pitchers never bat.

---

## Random Lineup (v1 rules)
When no lineup is provided for a team:
- Create a **9-spot batting order including DH** (pitcher does not bat).
- Use a simple random order of hitters drawn from the team’s available non-pitcher position players.
  - If no roster is supplied, instantiate **nine league-average hitters** with generic names (e.g., “Hitter 1”…“Hitter 9”).
- Batting order is randomized **once** at game start based on the game seed.
- Defensive positions are not enforced in v1 (informational only).

---

## Game Flow (high level)
1. Initialize game: Top 1st, 0–0, bases empty, 0 outs. One starting pitcher per team for the full game (no substitutions).
2. For each half-inning:
   - Resolve plate appearances (PAs) to terminal results (K/BB/HBP/InPlayOut/1B/2B/3B/HR/ROE).
   - Apply scoring with existing engine rules (RBI attribution fix; walk-off logic; LOB snapshot).
   - Stop the half at 3 outs.
3. **Skip Bottom 9** if the home team leads after the Top 9 (show “X” in the line score).
4. **Walk-off handling**:
   - Non-HR: clamp runs to the **minimum needed to win**, then end game; **LOB = 0**.
   - HR: **all** runners (and batter) score; **LOB = 0**; end game.
5. If tied after 9, **declare a tie** (v1; no extras).

---

## Output (text only)
**Header**
- `AWAY @ HOME — Seed: 12345`
- Date/time stamp (local), “DH: ON”, “Extras: OFF (tie allowed)”.
- If seed omitted by user, print `Seed: <generated>`.

**Running Line Score**
- Inning line per team: `1 2 3 4 5 6 7 8 9 | R H E`
- Home shows “X” for skipped B9.

**Play Log (per PA, no pitches)**
- One line per PA:
  - `[Top 1] #1 Smith vs Verlander — Single to RF. R1 to 1B.`
  - `[Top 1] #2 Jones — K swinging. 1 out.`
  - Markers: `BB`, `HBP`, `SF`, `ROE`, `DP`, `TP`, `E6`, `IBB` (if modeled), `Walk-off: …`
- Keep phrasing stable and compact; no randomness in wording.

**Team Totals**
- `Final: AWAY 3 — HOME 4`
- `R/H/E`, team LOB.

**Box Scores**
- **Batting (per team)**: `AB  R  H  RBI  BB  K  HR  LOB`
- **Pitching (per team)**: `IP  BF  H  R  ER  BB  K  HR`
- Include every player who appeared.

**Footer**
- `Seed: 12345`
- Optional one-line hash of the play log for snapshot testing (e.g., `LogHash: abc123`).

---

## Console App & CLI Contract (v1)

### Project
- New console project: `src/DiamondSim.Cli/`
- Entry point runs exactly one game per invocation.

### Invocation (dotnet)
- Dev usage: `dotnet run --project src/DiamondSim.Cli -- [ARGS...]`
- Published usage (optional later): `diamondsim [ARGS...]`

### Required Behavior
- Runs a single 9-inning game and writes **text** to STDOUT (and optionally to a file via `--out`).
- No pitch-by-pitch; per-PA lines only.
- DH is **always ON**; pitcher never bats.
- If no seed is provided, generate one **and print it** in the header.

### Arguments
- `--home <NAME>` (required) — Home team name.
- `--away <NAME>` (required) — Away team name.
- `--seed <INT>` (optional) — Deterministic seed. If omitted, a random seed is chosen and printed.
- `--home-lineup "<CSV>"` (optional) — 9 hitters (comma-separated). If omitted, generate random lineup.
- `--away-lineup "<CSV>"` (optional) — 9 hitters (comma-separated). If omitted, generate random lineup.
- `--out <PATH>` (optional) — Write the same text output to this file in addition to STDOUT.
- `--log-level <plays|summary>` (optional) — Default `plays`.
- `--version` — Prints version and exits.
- `--help` or `-h` — Prints usage and exits.

**Notes**
- Lineup entries are display names only (positions ignored in v1).
- Extras: OFF (ties allowed); DH: ON (fixed).

### Examples
- Deterministic run with provided lineups:
  ```
  dotnet run --project src/DiamondSim.Cli --     --home Comets --away Sharks --seed 12345     --home-lineup "A.Alvarez,B.Brown,C.Chang,D.Diaz,E.Evans,F.Ford,G.Gao,H.Holt,I.Ishikawa"     --away-lineup "J.Jones,K.Kent,L.Liu,M.Miller,N.Nash,O.Ortega,P.Perez,Q.Quinn,R.Ross"
  ```

- Random seed + random lineups, also save to file:
  ```
  dotnet run --project src/DiamondSim.Cli --     --home Comets --away Sharks --out game.txt
  ```

- Shorter log:
  ```
  dotnet run --project src/DiamondSim.Cli --     --home Comets --away Sharks --seed 42 --log-level summary
  ```

### Output (to STDOUT and optional `--out`)
- **Header**: `Sharks @ Comets — Seed: 8675309 — DH: ON — Extras: OFF (tie allowed)`
  - When lineups were generated, print both batting orders beneath the header:
    ```
    Away lineup: J.Jones, K.Kent, L.Liu, M.Miller, N.Nash, O.Ortega, P.Perez, Q.Quinn, R.Ross (DH)
    Home lineup: A.Alvarez, B.Brown, C.Chang, D.Diaz, E.Evans, F.Ford, G.Gao, H.Holt, I.Ishikawa (DH)
    ```
- **Running line score** per team (9 columns) with `X` for skipped B9.
- **Play log** per PA (no pitch logs), stable phrasing.
- **Team totals**: `Final: AWAY x — HOME y` + `R/H/E`, team LOB.
- **Box scores** (batters, pitchers).
- **Footer**: `Seed: <INT>` and optional deterministic log hash (single line).

### Validation & Acceptance (CLI-specific)
**Inputs & Validation**
- `--home` and `--away` must be provided; else exit with usage and `exit code 2`.
- If a lineup is provided, it **must** contain exactly 9 names; else `exit code 2`.
- Reject any attempt to include a pitcher in the batting lineup (v1 rule: pitchers never bat).
- Unknown flags → print usage; `exit code 2`.

**Determinism**
- With the same `--seed`, the entire text output (except timestamp) is identical across runs.
- When `--seed` omitted, the chosen random seed is printed and can be reused to reproduce output.

**Output Shape**
- Line score always shows 9 innings; Home uses `X` for skipped B9.
- Play log includes every PA in order; no pitch-by-pitch lines.
- Box scores include every batter/pitcher who appeared.
- Totals reconcile: line score ↔ team R/H/E ↔ event log; RBI sums match v1 rules (ROE=0; BL BB/HBP=1; SF=1; HR=all; walk-off clamp).

**Rule Fidelity (engine pass-through)**
- Walk-off: non-HR clamps to minimum needed; HR scores all; both set LOB=0; game ends.
- LOB computed from instant-of-third-out snapshot for half-ending plays.

**Exit Codes**
- `0` success.
- `2` usage/validation error (bad args, wrong lineup size, etc.).
- `1` unexpected error.

**Help Text**
- `--help` prints:
  - brief description
  - required/optional args
  - examples (one deterministic, one random)
  - notes: “DH: ON; Extras: OFF (tie allowed); no pitch-by-pitch; text only.”

### Logging / Noise
- Only the game report goes to STDOUT.
- Validation and usage go to STDERR.
- No debug spew.
